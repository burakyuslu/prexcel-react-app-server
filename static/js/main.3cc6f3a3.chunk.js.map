{"version":3,"sources":["pages/ScreenIds.js","logo.svg","pages/DialogBox.js","pages/Login.js","pages/MainMenu.js","pages/MyPresentations.js","pages/PresentationDetails.js","pages/TranscriptDetails.js","pages/SignUp.js","pages/LivePresentation.js","pages/ChatBot.js","pages/UserAccountDetails.js","pages/NewPresentation.js","pages/UploadRecordingScreen.js","pages/ProgressTracking.js","pages/CheckCamera.js","pages/UploadPresentationLoading.js","pages/TutorialApp.js","pages/TutorialPresentation.js","App.js","reportWebVitals.js","index.js"],"names":["ScreenIds","LOGIN_SCREEN_ID","SIGNUP_SCREEN_ID","FORGOT_PASSWORD_SCREEN_ID","MAIN_MENU_SCREEN_ID","USER_ACC_DETAILS_SCREEN_ID","MY_PRESENTATIONS_SCREEN_ID","PRESENTATION_DETAILS_SCREEN_ID","TRANSCRIPT_DETAILS_SCREEN_ID","UPLOAD_PRESENTATION_SCREEN_ID","LIVE_PRESENTATION_FEEDBACK_SCREEN_ID","LIVE_FEEDBACK_SCREEN_ID","NEW_PRESENTATION_ID","CHECK_CAMERA","LOADING_SCREEN","TUTORIAL_PRESENTATION_SCREEN_ID","TUTORIAL_APP_SCREEN_ID","CHAT_BOT_SCREEN_ID","PROGRESS_TRACKING_SCREEN_ID","DialogBox","props","Dialog","open","onClose","DialogTitle","sx","backgroundColor","id","dialogTitle","DialogContent","DialogContentText","dialogContent","DialogActions","Button","onClick","autoFocus","Login","useState","dialogOpen","setDialogOpen","count","setCount","useEffect","console","log","onUserIdHandler","onLoginHandler","Grid","container","spacing","item","xs","style","flexDirection","alignItems","justifyContent","Paper","marginTop","marginBottom","elevation","paddingTop","marginRight","marginLeft","TextField","width","border","borderRadius","label","variant","type","paddingBottom","login_username","document","getElementById","login_password","userData","fetch","method","headers","body","JSON","stringify","then","resp","json","data","catch","error","getUser","value","login_error_message","MainMenu","onMainMenuHandler","columns","field","headerName","editable","MyPresentations","fetchPresentations","rows","setRows","selectedRows","setSelectedRows","getPresentations","userID","arr2d","fixedRows","i","length","newObj","name","transcript","user_id","wpm","duration","filler_ratio","word_count","gap_ratio","fd_score","grade","dragged_ratio","repeated_ratio","p_date","push","fixData","currentUserID","height","pageSize","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","onSelectionModelChange","ids","selectedIDs","Set","filter","row","has","disabled","onMyPresentationsHandler","color","onPresentationSelection","PresentationDetails","selectedPresentations","Card","Math","round","toFixed","textAlign","align","textIndent","transcriptTokens","split","processTranscriptArrTemp","tagStack","token","pop","word","processTranscriptHandler","onPresentationDetails","TranscriptDetails","padding","processedTranscriptArr","map","typeOfWord","margin","onTranscriptDetails","SignUp","setDialogContent","setDialogTitle","required","username","email","password","password2","signUpSuccessful","newUser","newData","onSignUpHandler","interval1","interval2","interval3","interval4","LivePresentation","fd_flag","setFdFlag","decibel_flag","setDecibel","setTranscript","recommendation1","setRecommendation1","recommendation2","setRecommendation2","recommendation3","setRecommendation3","recommendation4","setRecommendation4","recommendation5","setRecommendation5","endButtonDisabled","setEndButtonDisabled","startButtonDisabled","setStartButtonDisabled","flagGap","setFlagGap","presentationData","newPresentationName","setInterval","a","clearInterval","onLivePresentationHandler","ChatBotScreen","questions","position","question","answer","initializeChatBotMessage","msgObj","messageList","setMessageList","newQuestionNumber","setNewQuestionNumber","setValue","ref","useRef","ChatItem","messageStyle","float","background","overflowWrap","wordWrap","text","str","TextList","key0","random","toString","substr","List","message","maxHeight","overflow","className","onSubmit","event","preventDefault","newQuestionNumberText","answ","isNaN","newAnswer","newList","current","scrollIntoView","behavior","block","size","endIcon","onChange","target","fontSize","onChatBot","UserAccountDetails","setID","setUsername","presentationCount","setPresentationCount","setEmail","onUserAccountDetailsHandler","NewPresentation","onNewPresentationName","onNewPresentationHandler","UploadRecordingScreen","flagPresentationSelector","setFlagPresentationSelector","setPresentationProcessed","setFlagProcessingPresentation","path","onFileSelected","file","files","onInput","onUploadPresentationHandler","uploadHandler","processPresentation","ProgressTracking","formData","objArr","dataType","obj","returnDataObj","Chart","register","registerables","state","labels","datasets","fill","lineTension","borderColor","borderWidth","options","title","display","legend","onProgressTracking","pName","pDate","Date","String","toDateString","CheckCamera","playing","setPlaying","muted","autoPlay","getElementsByClassName","srcObject","getTracks","stop","navigator","getUserMedia","video","stream","err","onCheckCameraHandler","UploadPresentationLoading","goToMainMenu","onPresentationLoadingHandler","processingNotDone","processingFinished","uploadDone","TutorialApp","onTutorialAppHandler","TutorialPresentation","onTutorialPresentationHandler","App","setTranscriptArr","currentScreen","setCurrentScreen","setCurrentUserID","setSelectedPresentations","setNewPresentationName","setUploadDone","changeViewHandler","newScreenId","userIdHandler","newUserId","presentationSelectionHandler","presentations","newPresentationNameHandler","minHeight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3cc6f3a3.chunk.js","sourcesContent":["\nconst ScreenIds = {\n\n   // login-signup\n   LOGIN_SCREEN_ID: 1,\n   SIGNUP_SCREEN_ID: 2,\n   FORGOT_PASSWORD_SCREEN_ID: 3,\n\n   // main menu's & acc details\n   MAIN_MENU_SCREEN_ID: 4,\n   USER_ACC_DETAILS_SCREEN_ID: 5,\n\n   // presentation screens\n   MY_PRESENTATIONS_SCREEN_ID: 6,\n   PRESENTATION_DETAILS_SCREEN_ID: 7,\n   TRANSCRIPT_DETAILS_SCREEN_ID: 8,\n   UPLOAD_PRESENTATION_SCREEN_ID: 9,\n   LIVE_PRESENTATION_FEEDBACK_SCREEN_ID: 10,\n   LIVE_FEEDBACK_SCREEN_ID: 11,\n   NEW_PRESENTATION_ID: 22,\n   CHECK_CAMERA: 23,\n   LOADING_SCREEN: 24,\n   // LIVE_PRESENTATION_ID: 25,\n\n\n   // tutorials\n   TUTORIAL_PRESENTATION_SCREEN_ID: 12,\n   TUTORIAL_APP_SCREEN_ID: 13,\n   CHAT_BOT_SCREEN_ID: 14,\n\n   PROGRESS_TRACKING_SCREEN_ID: 15,\n\n\n}\n\n\nexport default ScreenIds","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from \"@mui/material\";\nimport React from \"react\";\n\n\nexport default function DialogBox(props) {\n\n   return (\n\n      <div>\n         <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle sx={{backgroundColor: 'whitesmoke'}} id=\"alert-dialog-title\">\n               {props.dialogTitle}\n            </DialogTitle>\n            <DialogContent sx={{backgroundColor: 'whitesmoke'}}>\n               <DialogContentText id=\"alert-dialog-description\">\n                  {props.dialogContent}\n               </DialogContentText>\n            </DialogContent>\n            <DialogActions sx={{backgroundColor: 'whitesmoke'}}>\n               <Button  onClick={props.onClose} autoFocus>\n                  Go Back\n               </Button>\n            </DialogActions>\n         </Dialog>\n      </div>\n\n   );\n}","import React, {useState, useEffect, useRef} from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\n\n// material ui components\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\nimport DialogBox from \"./DialogBox\";\n\nconst Login = (props) => {\n\n   const [dialogOpen, setDialogOpen] = useState(false);\n   const handleClose = () => {\n      setDialogOpen(false);\n   };\n\n   const [count, setCount] = useState(0);\n   useEffect(() => {\n      // if successful change to main menu\n      if (count != \"-1\" && count != \"0\") {\n         console.log(count);\n         props.onUserIdHandler(count);\n         console.log(\"User ID : \" + count + \" is posted to App.js\");\n         props.onLoginHandler(ScreenIds.MAIN_MENU_SCREEN_ID);\n      }\n      // otherwise reshow the login screen\n      else {\n         props.onLoginHandler(ScreenIds.LOGIN_SCREEN_ID);\n      }\n   });\n\n   function AttemptLogin() {\n      let login_username = document.getElementById('login_username')\n      let login_password = document.getElementById('login_password')\n      const getUser = (userData) => {\n         let success = true;\n         fetch('http://localhost:5000/login', {\n            method: 'POST',\n            headers: {\n               'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userData)\n         })\n            .then((resp) => {\n               return resp.json()\n            })\n            .then((data) => {\n               console.log(data);\n               setCount(data);\n               if (data === -1) {\n                  console.log(\"dialog box opening\");\n                  setDialogOpen(true);\n               }\n            })\n            .catch(error => console.log(error))\n\n         return success;\n      };\n\n      const userData = {\n         \"username\": login_username.value,\n         \"password\": login_password.value\n      };\n\n      getUser(userData);\n\n      login_username.value = \"\";\n      login_password.value = \"\";\n   }\n\n   function goToSignUp() {\n\n      props.onLoginHandler(ScreenIds.SIGNUP_SCREEN_ID)\n   }\n\n   return (\n      <Grid container spacing={2}>\n\n         <Grid item xs={12}>\n            <h1 style={{flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>Welcome To Prexcel </h1>\n         </Grid>\n\n         <Grid item xs={4}/>\n         <Grid item xs={4}>\n            <Paper style={{\n               backgroundColor: 'whitesmoke',\n               marginTop: '50%',\n               marginBottom: '5%',\n               flexDirection: 'row',\n               alignItems: 'center',\n               justifyContent: 'center'\n            }} elevation={8}>\n\n               <Grid style={{paddingTop: '5%'}} item xs={12}>\n                  Please log-in or create an account to continue:\n               </Grid>\n\n               <Grid style={{marginTop: '5%',}} item xs={12}>\n                  <Paper sx={{backgroundColor: 'white', marginRight: '33%', marginLeft: '32.1%'}} elevation={4}>\n                     <TextField data-testid=\"login_username_field\" sx={{width:'99%', border: \"2px solid #2c778f\", borderRadius:'5px',}} id=\"login_username\" label=\"Username\"\n                                variant=\"filled\"/>\n                  </Paper>\n               </Grid>\n\n               <Grid style={{marginTop: '5%'}} item xs={12}>\n                  <Paper sx={{backgroundColor: 'white', marginRight: '33%', marginLeft: '32.1%'}} elevation={4}>\n                     <TextField data-testid=\"login_password_field\" sx={{width:'99%', border: \"2px solid #2c778f\", borderRadius:'5px',}} id=\"login_password\" label=\"Password\"\n                                variant=\"filled\" type=\"password\"/>\n                  </Paper>\n               </Grid>\n\n               <Grid style={{marginTop: '5%', paddingBottom: '5%'}} item xs={12}>\n                  <Button data-testid=\"login_button_id\" style={{marginRight: '5%'}} variant=\"contained\" onClick={AttemptLogin}>Log-In</Button>\n                  <Button data-testid=\"sign_up_button_id\" variant=\"contained\" onClick={goToSignUp}>Sign-Up</Button>\n                  <DialogBox login_error_message=\"login_error_message_id\" open={dialogOpen} onClose={handleClose}\n                             dialogContent={\"Please re-enter your login credentials.\"}\n                             dialogTitle={\"Incorrect password or username!\"}/>\n               </Grid>\n\n            </Paper>\n         </Grid>\n         <Grid item xs={4}/>\n\n\n      </Grid>\n   );\n};\n\nexport default Login;","import React, { useState, useEffect, useRef } from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\n\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\n\nconst MainMenu = (props) => {\n\n  function logOut() {\n     // todo discard authorization token\n\n     props.onMainMenuHandler(ScreenIds.LOGIN_SCREEN_ID);\n  }\n\n   function goToChatBot() {\n      props.onMainMenuHandler(ScreenIds.CHAT_BOT_SCREEN_ID);\n   }\n\n  function goToMyPresentations() {\n    props.onMainMenuHandler(ScreenIds.MY_PRESENTATIONS_SCREEN_ID);\n  }\n\n   function goToUserAccountDetails() {\n      props.onMainMenuHandler(ScreenIds.USER_ACC_DETAILS_SCREEN_ID);\n   }\n\n  function goToLivePresentation() {\n      props.onMainMenuHandler(ScreenIds.LIVE_PRESENTATION_FEEDBACK_SCREEN_ID);\n  }\n\n   function goToNewPresentation() {\n      props.onMainMenuHandler(ScreenIds.NEW_PRESENTATION_ID);\n   }\n\n   function doNothing() {\n     props.onMainMenuHandler(ScreenIds.MAIN_MENU_SCREEN_ID);\n   }\n\n   function goToTutorialApp() {\n      props.onMainMenuHandler(ScreenIds.TUTORIAL_APP_SCREEN_ID);\n   }\n\n   function goToTutorialPresentation() {\n      props.onMainMenuHandler(ScreenIds.TUTORIAL_PRESENTATION_SCREEN_ID);\n   }\n\n   return (\n      <div>\n         <Grid container spacing={2}>\n            <Grid item xs={12} >\n               <h1 data-testid=\"prexcel_title_id\" style={{flexDirection:'row', alignItems:'center', justifyContent:'center'}} >\n                  Prexcel\n               </h1><br/>\n               <h1 style={{flexDirection:'row', alignItems:'center', justifyContent:'center'}} >The Multifunctional Presentation Assistant\n               </h1><br/>\n            </Grid>\n            <Grid item xs={4}/>\n            <Grid item xs={4}>\n               <Paper style={{backgroundColor:'whitesmoke', marginTop: '2.5%', marginBottom:'5%', flexDirection:'row', alignItems:'center', justifyContent:'center'}} elevation={8}>\n                  <Button style={{ marginTop: '5%', marginBottom: '5%'}} variant=\"contained\" onClick={goToNewPresentation}>Start a Presentation</Button> <br/>\n                  <Button style={{ marginBottom: '5%'}} variant=\"contained\" onClick={goToMyPresentations}>My Presentations</Button> <br/>\n                  <Button style={{ marginBottom: '5%'}} variant=\"contained\" onClick={goToTutorialApp}>Tutorial on Prexcel</Button> <br/>\n                  <Button style={{ marginBottom: '5%'}} variant=\"contained\" onClick={goToTutorialPresentation}>Tutorial on Presentations</Button> <br/>\n                  <Button style={{ marginBottom: '5%'}} variant=\"contained\" onClick={goToUserAccountDetails}>User-Account-Details</Button> <br/>\n                  <Button style={{ marginBottom: '5%'}} variant=\"contained\" onClick={goToChatBot}>Chat Bot</Button> <br/>\n                  <Button style={{ marginBottom: '5%'}} variant=\"contained\" onClick={logOut}>Log-Out</Button>\n               </Paper>\n            </Grid>\n            <Grid item xs={4}/>\n         </Grid>\n      </div>\n   );\n};\n\nexport default MainMenu;","import * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport {useEffect, useState} from \"react\";\nimport ScreenIds from \"./ScreenIds\";\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\n\nconst columns = [\n   {\n      field: 'id',\n      headerName: 'ID',\n      width: 90\n   },\n   {\n      field: 'name',\n      headerName: 'Name',\n      width: 150,\n      editable: true,\n   },\n];\n\nexport default function MyPresentations(props) {\n\n   useEffect(fetchPresentations, []);\n\n   /* IMPORTANT !!\n   THIS HOOK TO BE USED FOR ACTUAL DB CONNECTION\n    */\n   const [rows, setRows] = useState([]);\n\n   function goToPresentationDetails() {\n      props.onMyPresentationsHandler(ScreenIds.PRESENTATION_DETAILS_SCREEN_ID);\n   }\n\n   function goToProgressTracking() {\n      props.onMyPresentationsHandler(ScreenIds.PROGRESS_TRACKING_SCREEN_ID);\n   }\n\n   /* DO NOT OPEN BELOW COMMENT */\n   //const [selectionModel, setSelectionModel] = useState(() => rows.filter((r) => true).map((r) => r.presentation_id));\n   const [selectedRows, setSelectedRows] = useState([]);\n\n   function goBackToMainMenu() {\n      props.onMyPresentationsHandler(ScreenIds.MAIN_MENU_SCREEN_ID);\n   }\n\n   function fetchPresentations() {\n      getPresentations(userData);\n   }\n\n   const getPresentations = (userID) => {\n      let success = true;\n      fetch('http://localhost:5000/getPresentations', {\n         method: 'POST',\n         headers: {\n            'Content-Type':'application/json'\n         },\n         body:JSON.stringify(userID)\n      })\n         .then((resp) => {\n            return resp.json()\n         })\n         .then((data) => {\n            console.log(data);\n            setRows(fixData(data));\n            console.log(rows);\n         })\n         .catch(error => console.log(error))\n\n      return success;\n   };\n\n   const userData = {\n      \"userID\": props.currentUserID\n   };\n\n   function fixData (arr2d) {\n\n      let fixedRows = [];\n\n      for (let i = 0; i < arr2d.length; i++) {\n         let newObj = {};\n         newObj.id = arr2d[i][0];\n         newObj.name = arr2d[i][1];\n         newObj.transcript = arr2d[i][2];\n         newObj.user_id = arr2d[i][3];\n         newObj.wpm = arr2d[i][4];\n         newObj.duration = arr2d[i][5];\n         newObj.filler_ratio = arr2d[i][6];\n         newObj.word_count = arr2d[i][7];\n         newObj.gap_ratio = arr2d[i][8];\n         newObj.fd_score = arr2d[i][9];\n         newObj.grade = arr2d[i][10];\n         newObj.dragged_ratio = arr2d[i][11];\n         newObj.repeated_ratio = arr2d[i][12];\n         newObj.p_date = arr2d[i][13];\n\n         fixedRows.push(newObj);\n      }\n      return fixedRows;\n   }\n\n   return (\n      <div>\n         {fetchPresentations}\n         <Grid container spacing={2}>\n\n            <Grid item xs={12}>\n               <h1>My Presentations</h1>\n            </Grid>\n\n            <Grid item xs={3}/>\n            <Grid item xs={6}>\n               <Paper sx={{backgroundColor:'whitesmoke', height:400, marginTop: '2.5%', marginBottom:'5%', flexDirection:'row', alignItems:'center', justifyContent:'center'}} elevation={8}>\n                  <DataGrid\n                     rows={rows}\n                     columns={columns}\n                     pageSize={5}\n                     rowsPerPageOptions={[5]}\n                     checkboxSelection\n                     disableSelectionOnClick\n\n                     //selectionModel={selectionModel}\n                     onSelectionModelChange={(ids) => {\n                        const selectedIDs = new Set(ids);\n                        const selectedRows = rows.filter((row) =>\n                           selectedIDs.has(row.id),\n                        );\n\n                        setSelectedRows(selectedRows);}}\n                  />\n                  {console.log(JSON.stringify(selectedRows, null, 4))}\n                  <br/>\n               </Paper>\n               <Paper sx={{marginRight:'25%', marginLeft:'25%', backgroundColor:'whitesmoke'}} elevation={8}>\n                  <Button style={{marginTop:'5%'}} disabled={!(selectedRows.length === 1)} variant=\"contained\" onClick={goToPresentationDetails}>View Report</Button><br/><br/>\n                  <Button  disabled={!(selectedRows.length >= 2)} variant=\"contained\" onClick={goToProgressTracking}>See Progress</Button><br/><br/>\n                  <Button data-testid=\"my_presentations_go_back\" style={{marginBottom:'5%', color:\"white\"}} variant=\"contained\" onClick={goBackToMainMenu}>Back To Main Menu</Button>\n               </Paper>\n            </Grid>\n            <Grid item xs={3}/>\n         </Grid>\n         {props.onPresentationSelection(selectedRows)}\n      </div>\n   );\n}","import * as React from 'react';\nimport {Card, Grid} from \"@mui/material\";\nimport ScreenIds from \"./ScreenIds\";\nimport {Button, Paper, TextField} from \"@mui/material\";\nimport {useState} from \"react\";\n\nexport default function PresentationDetails(props) {\n\n   function goBackToMyPresentations() {\n      props.onPresentationDetails(ScreenIds.MY_PRESENTATIONS_SCREEN_ID);\n   }\n\n   const str_type_regular = 0;\n   const str_type_filler = 1;\n   const str_type_gap = 2;\n   const str_type_repeated = 3;\n   const str_type_dragged = 4;\n\n   //const [processedTranscriptArr, setTranscriptArr] = useState([]);\n\n   function goToTextTranscript() {\n      let transcript = props.selectedPresentations[0].transcript;\n\n      // let transcript = \"The short story is {dragged} usually concerned with a single {dragged/} effect conveyed in only one or {repeated} a few significant episodes {repeated/} or scenes. The form {filler} encourages {filler/} economy of setting, {dragged} concise {repeated} narrative, and the {repeated/} omission of a {dragged/} complex plot; character is disclosed {/space/} in action and dramatic encounter but is seldom fully developed. Despite {/space/} its relatively limited scope, though, a short story is often judged by its ability {dragged} to provide {/space/} a “complete” or {dragged/} satisfying treatment of its characters and subject.\";\n\n      let transcriptTokens = transcript.split(\" \");\n\n      let processTranscriptArrTemp = [];\n      let tagStack = [];\n\n      tagStack.push(str_type_regular);\n\n      for (let i = 0; i < transcriptTokens.length; i++) {\n         // console.log(\"i:\" + transcriptTokens[i]);\n         let token = transcriptTokens[i];\n         if( token !== \"\"){\n            if(token === \"{dragged}\"){\n               tagStack.push(str_type_dragged);\n            }\n            else if (token === \"{dragged/}\"){\n               tagStack.pop();\n            }\n            else if(token === \"{filler}\"){\n               tagStack.push(str_type_filler);\n            }\n            else if (token === \"{filler/}\"){\n               tagStack.pop();\n            }\n            else if(token === \"{repeated}\"){\n               tagStack.push(str_type_repeated);\n            }\n            else if (token === \"{repeated/}\"){\n               tagStack.pop();\n            }\n            // todo check\n            else if (token === \"{/space/}\"){\n               transcriptTokens[i] = \"(...)\";\n            }\n            // console.log(\"TRANSCRIPT TOKEN:\" + transcriptTokens[i]);\n\n            // push into the array\n            if( transcriptTokens[i] === \"(...)\" || transcriptTokens[i][0] !== \"{\"){\n               if( transcriptTokens[i] !== \"(...)\"){\n                  processTranscriptArrTemp.push( { type: tagStack[tagStack.length-1], word: transcriptTokens[i]} );\n               }\n               else {\n                  processTranscriptArrTemp.push( { type: str_type_gap, word: transcriptTokens[i]} );\n               }\n            }\n         }\n      }\n\n      console.log(processTranscriptArrTemp);\n      props.processTranscriptHandler(processTranscriptArrTemp);\n      // variable: processTranscriptArrTemp\n      // hook: processedTranscriptArr, setTranscriptArr\n\n      props.onPresentationDetails(ScreenIds.TRANSCRIPT_DETAILS_SCREEN_ID);\n   }\n\n   return(\n      <div>\n\n         <Grid container spacing={2}>\n\n            <Grid item xs={12}>\n               <h2>{props.selectedPresentations[0].name} Presentation </h2>\n               <p>Detailed Analysis Report</p>\n            </Grid>\n\n            <Grid item xs={5}/>\n            <Grid item xs={2}>\n               <Card sx={{backgroundColor:'#E5E5E5'}} elevation={4}>\n                  <Card sx={{marginTop:'8%', marginBottom:'8%', marginLeft: '8%', marginRight: '8%', }} elevation={4}>\n                     <h3> Final Grade is : { (Math.round(100 * props.selectedPresentations[0].grade * 100) / 100).toFixed(2) }</h3>\n                  </Card>\n               </Card>\n            </Grid>\n            <Grid item xs={5}/>\n\n            <Grid item xs={2}/>\n            <Grid item xs={4}>\n               <Card sx={{backgroundColor:'#E5E5E5', textAlign:\"left\", marginLeft: '5%', marginRight: '5%'}} elevation={8}>\n\n                  <Card sx={{ marginLeft: '8%', marginRight: '8%', marginBottom: '8%', marginTop:'5%'}} elevation={4}>\n                     <p style={{marginLeft: '2.5%'}}><u>Grades:</u></p>\n                     <p style={{marginLeft: '2.5%'}}>Gap Grade : { (Math.round(100 * (1 - props.selectedPresentations[0].gap_ratio) * 100) / 100).toFixed(2) }</p>\n                     <p style={{marginLeft: '2.5%'}}>Filler Grade : { (Math.round(100 * (1 - props.selectedPresentations[0].filler_ratio) * 100) / 100).toFixed(2) }</p>\n                     <p style={{marginLeft: '2.5%'}}>Face Recognition Score : {props.selectedPresentations[0].fd_score}</p>\n                  </Card>\n\n                  <Card sx={{ marginLeft: '8%', marginRight: '8%', marginBottom: '8%'}} elevation={4}>\n\n                     <p style={{marginLeft: '2.5%'}}>Statistics:  </p>\n                     <ul align=\"left\">\n                        <li>You dragged { (Math.round(100 * props.selectedPresentations[0].dragged_ratio * 100) / 100).toFixed(2) } % of the time. </li>\n                        <li>You filled time { (Math.round(100 * props.selectedPresentations[0].filler_ratio * 100) / 100).toFixed(2) } % of the time. </li>\n                        <li>You were silent { (Math.round(100 * props.selectedPresentations[0].gap_ratio * 100) / 100).toFixed(2) } % of the time. </li>\n                     </ul>\n                  </Card>\n               </Card>\n            </Grid>\n            <Grid item xs={4}>\n               <Card sx={{backgroundColor:'#E5E5E5', textAlign:\"left\", marginLeft: '5%', marginRight: '5%'}} elevation={8}>\n\n                  <Card sx={{ marginLeft: '8%', marginRight: '8%', marginBottom: '8%', marginTop:'5%'}} elevation={4}>\n                     <p style={{textIndent: '2.5%' , marginTop: '4%'}}>Duration : {props.selectedPresentations[0].duration} seconds</p>\n                  </Card>\n\n                  <Card sx={{ marginLeft: '8%', marginRight: '8%', marginBottom: '8%'}} elevation={4}>\n                     <p style={{marginLeft: '2.5%'}}><u>Speech Feedback:</u></p>\n                     <p style={{marginLeft: '2.5%'}}>Percentage of Filler Words : {props.selectedPresentations[0].filler_ratio}</p>\n                  </Card>\n\n                  <Card sx={{ marginLeft: '8%', marginRight: '8%', marginBottom: '8%'}} elevation={4}>\n\n                     <p style={{ marginLeft: '2.5%'}}>Word per minute (wpm) : {props.selectedPresentations[0].wpm}</p>\n\n                  </Card>\n                  <ul align=\"left\">\n                     <li style={{color:'#E5E5E5'}}> <br/> </li>\n                     <li style={{color:'#E5E5E5'}}> <br/> </li>\n                  </ul>\n               </Card>\n            </Grid>\n         </Grid>\n         <Button style={{marginTop:'1.5%'}} variant=\"contained\" onClick={goToTextTranscript}>See Text Transcript</Button><br/>\n         <Button style={{marginTop:'1.5%'}} variant=\"contained\" onClick={goBackToMyPresentations}>Back To My Presentations</Button><br/><br/><br/>\n      </div>\n   );\n}","import ScreenIds from \"./ScreenIds\";\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\nimport React, {useState} from \"react\";\n\nexport default function TranscriptDetails(props) {\n\n\n   function goBackToPresentationDetails() {\n      props.onTranscriptDetails(ScreenIds.PRESENTATION_DETAILS_SCREEN_ID);\n   }\n\n\n\n   // const [processedTranscriptArr, setTranscriptArr] = useState([]);\n\n   // todo\n   function processTranscript() {\n\n      console.log(props.processedTranscriptArr);\n\n      // let transcript = props.selectedPresentations[0].transcript;\n\n      /*let transcript = \"The short story is {dragged} usually concerned with a single {dragged/} effect conveyed in only one or {repeated} a few significant episodes {repeated/} or scenes. The form {filler} encourages {filler/} economy of setting, {dragged} concise {repeated} narrative, and the {repeated/} omission of a {dragged/} complex plot; character is disclosed {/space/} in action and dramatic encounter but is seldom fully developed. Despite {/space/} its relatively limited scope, though, a short story is often judged by its ability {dragged} to provide {/space/} a “complete” or {dragged/} satisfying treatment of its characters and subject.\";\n\n      let transcriptTokens = transcript.split(\" \");\n\n      let processTranscriptArrTemp = [];\n      let tagStack = [];\n\n      tagStack.push(str_type_regular);\n\n      for (let i = 0; i < transcriptTokens.length; i++) {\n         // console.log(\"i:\" + transcriptTokens[i]);\n         let token = transcriptTokens[i];\n         if( token !== \"\"){\n            if(token === \"{dragged}\"){\n               tagStack.push(str_type_dragged);\n            }\n            else if (token === \"{dragged/}\"){\n               tagStack.pop();\n            }\n            else if(token === \"{filler}\"){\n               tagStack.push(str_type_filler);\n            }\n            else if (token === \"{filler/}\"){\n               tagStack.pop();\n            }\n            else if(token === \"{repeated}\"){\n               tagStack.push(str_type_repeated);\n            }\n            else if (token === \"{repeated/}\"){\n               tagStack.pop();\n            }\n            // todo check\n            else if (token === \"{/space/}\"){\n               transcriptTokens[i] = \"(...)\";\n            }\n            // console.log(\"TRANSCRIPT TOKEN:\" + transcriptTokens[i]);\n\n            // push into the array\n            if( transcriptTokens[i] === \"(...)\" || transcriptTokens[i][0] !== \"{\"){\n               if( transcriptTokens[i] !== \"(...)\"){\n                  processTranscriptArrTemp.push( { type: tagStack[tagStack.length-1], word: transcriptTokens[i]} );\n               }\n               else {\n                  processTranscriptArrTemp.push( { type: str_type_gap, word: transcriptTokens[i]} );\n               }\n            }\n         }\n      }\n\n      //console.log(processTranscriptArrTemp);\n\n      //// todo\n      //console.log(\" FINAL VERSION:\");\n      //let processedTranscriptArr = [];\n      //let tagStack2 = [];\n\n      //processedTranscriptArr.push(processTranscriptArrTemp[0])\n      //tagStack2.push(processTranscriptArrTemp[0].type);\n\n      //let i = 0;\n      //for (let currWord in processTranscriptArrTemp) {\n      //   if( i !== 0){\n      //      if(currWord.type === tagStack2[tagStack2.length - 1]){\n      //         let str1 = \" \" + currWord.word;\n      //         let w1 = (processedTranscriptArr[processedTranscriptArr.length - 1].word) + str1;\n      //         processedTranscriptArr[processedTranscriptArr.length - 1].word = w1;\n      //      }\n      //      else {\n      //         processedTranscriptArr.push({type: currWord.type, word: currWord.word});\n      //         tagStack2.push(currWord.type);\n      //      }\n      //   }\n      //   i = 1;\n      //}\n      //console.log(processedTranscriptArr);\n\n      /*\n      let indexTranscript = 0;\n      let textPtr = unprocessedTranscript[indexTranscript];\n\n      let processTranscriptArrTemp = [];\n\n      let tagStack = [];\n      tagStack.push(str_type_regular)\n\n\n      while(indexTranscript < unprocessedTranscript.length){\n\n         let nextWord = \"\";\n\n         let indexTemp = indexTranscript;\n\n         while(textPtr !== \" \"){\n            nextWord = nextWord.concat(unprocessedTranscript[indexTemp]);\n            indexTemp += 1;\n            textPtr = unprocessedTranscript[indexTemp]\n         }\n         nextWord = nextWord.concat(\" \" );\n\n         processTranscriptArrTemp.push( { type: tagStack[tagStack.length-1], word: nextWord} );\n         indexTranscript += nextWord.length;\n         textPtr += nextWord.length;\n\n         console.log(\"nextWord: \" + nextWord);\n\n\n      }\n\n      console.log(processTranscriptArrTemp);\n      */\n\n   }\n\n// {props.selectedPresentations[0].transcript}\n\n   const str_type_regular = 0;\n   const str_type_filler = 1;\n   const str_type_gap = 2;\n   const str_type_repeated = 3;\n   const str_type_dragged = 4;\n\n   function TranscriptDisplay(typeOfWord, word) {\n      // const trArr = props.processedTranscriptArr;\n\n      if (typeOfWord === str_type_regular) { // regular white\n         return <span style={{backgroundColor: \"#FFFFFF\"}}>{word} </span>;\n      } else if (typeOfWord === str_type_filler) { // filler yellow\n         return <span style={{backgroundColor: \"#FFFF00\"}}>{word} </span>;\n      } else if (typeOfWord === str_type_gap) { // gap red\n         return <span style={{backgroundColor: \"#FF0000\"}}> {word} </span>;\n      } else if (typeOfWord === str_type_repeated) { // repeated green\n         return <span style={{backgroundColor: \"#00FF00\"}}>{word} </span>;\n      } else if (typeOfWord === str_type_dragged) { // dragged blue\n         return <span style={{ backgroundColor:\"#4fc3f7\"}}>{word} </span>\n      }\n   }\n\n   //                   <Button variant=\"contained\" onClick={processTranscript}>Print</Button>\n\n   function printArr(){\n      console.log(props.processedTranscriptArr);\n   }\n\n   // <Button variant=\"contained\" onClick={printArr}>print</Button>\n\n   return(\n      <div>\n         <Grid container>\n            <Grid item xs={12}>\n               <h2>Transcript of \"{props.selectedPresentations[0].name}\"</h2>\n            </Grid>\n\n            <Grid item xs={7} style={{ marginTop: '1.65%', marginLeft: '2%'}}>\n\n               <Paper elevation={3} style={{ padding:'2%'}}>\n                     { (props.processedTranscriptArr).map(item => (\n                        TranscriptDisplay(item.type, item.word)))\n                     }\n               </Paper>\n\n            </Grid>\n            <Grid item xs={1}/>\n            <Grid item xs={4} style={{ marginLeft: '-4%'}}>\n               <Paper elevation={3} style={{ margin: '5%', paddingBottom:'1%'}}>\n                  Legend\n                  <ul align=\"left\">\n                     <li> <p> <span style={{ backgroundColor:\"#FFFFFF\"}}> Regular text </span>  </p> </li>\n                     <li> <p> <span style={{ backgroundColor:\"#4fc3f7\"}}> Dragged </span>  </p> </li>\n                     <li> <p> <span style={{ backgroundColor:\"#00FF00\"}}> Repeated </span>  </p> </li>\n                     <li> <p> <span style={{ backgroundColor:\"#FFFF00\"}}> Filler </span>  </p> </li>\n                     <li> <p> <span style={{ backgroundColor:\"#FF0000\"}}> Big gap </span> </p> </li>\n                  </ul>\n               </Paper>\n               <Paper elevation={3} style={{ margin: '5%', paddingBottom:'1%'}}>\n                  Statistics\n                  <ul align=\"left\">\n                     <li>You dragged { (Math.round(100 * props.selectedPresentations[0].dragged_ratio * 100) / 100).toFixed(2) } % of the time. </li>\n                     <li>You filled time { (Math.round(100 * props.selectedPresentations[0].filler_ratio * 100) / 100).toFixed(2) } % of the time. </li>\n                     <li>You were silent { (Math.round(100 * props.selectedPresentations[0].gap_ratio * 100) / 100).toFixed(2) } % of the time. </li>\n                  </ul>\n               </Paper>\n            </Grid>\n\n            <Grid style={{ marginTop: '5%', paddingBottom:'5%'}} item xs={12}>\n               <Button variant=\"contained\" onClick={goBackToPresentationDetails}>Back To Presentation Details</Button>\n\n            </Grid>\n            <Grid item xs={4}/>\n\n\n         </Grid>\n\n      </div>\n   );\n\n   /*return(\n     <div>\n     <h2>Transcript \" ENG 101 \" Presentation</h2>\n     <p style={{textAlign: \"left\", marginLeft: 40 , marginTop: 30, marginBottom: 30, marginRight: 40}}> ENG 101 Lesson -33\n       2 Lesson – 33 (Essay Writing)\n       In the past few lessons we have looked at paragraph writing. Now we shall move forward and look at longer pieces of writing which consist of several paragraphs. The problems we considered in sentence and paragraph writing are also the fundamental problems of longer composition – the same problems of unity, coherence, and emphasis. While some topics can be treated in a single paragraph others require more elaborate development. In longer compositions we\n       3 find problems of arrangement\n       find problems of arrangement. A longer composition, such as an essay, divides itself usually into a number of parts. In what order shall we present them? How much emphasis should be given to each fact? These are some of the problems faced in essay writing.\n       Now a lot depends on the purpose of your writing. If you are writing primarily to give information, then you need to be as exact as possible in the interest of clear, logical presentation of facts. If you are writing to describe something, or to create an image or a\n       4 picture then you shall perhaps put less emphasis upon accurate measurement and more upon suggestive and revealing details. If you are writing to tell a story, you will have to decide upon the point of highest interest and arrange your material carefully to give your reader the feeling or illusion of taking part in the action.\n       Writing an essay is not more difficult than writing a paragraph. There is only one difference – of length. The principles of\n       5 organization are the same for both: so if you can write a good paragraph, you can also write a good essay.\n       Process of Writing\n       Writing usually takes place in steps or stages. There are five stages or steps in the writing process. (1) Getting ideas: brainstorming, clustering & free writing (2) making brief outline (3) writing the 1st draft (4) revising (5) proof reading\n       6 .\n       Process of Writing: Five stages / steps\n       Getting ideas: brainstorming, clustering, free writing\n       making brief outline\n       writing the 1st draft\n       revising\n       proof reading\n       7 Step I: Getting Ideas: Primarily from reading, talking to people, listening to talk shows, TV programs on current issues etc.\n       (a) Brainstorming – For ideas\n       jot down points or ideas and their details as they come to your mind. Just write them down without putting them in any special order. Try to accumulate as many details as you can think of. This is one strategy of beginning an essay. The other strategy is\n       8 (b) Clustering: here you begin by writing your subject or topic in the center of a blank sheet of paper. Then as ideas come into your mind you put them down in boxes or circles around the subject or topic. You will now see a sample of clustering.\n       (c) Free writing, this is also a very useful technique. Here you just write down whatever comes into your mind about the topic. Continue writing for sometime without stopping to worry about grammar or spellings etc.\n     </p>\n       <Button variant=\"contained\" onClick={goBackToPresentationDetails}>Back To Presentation Details</Button>\n     </div>\n   );*/\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\nimport DialogBox from \"./DialogBox\";\n\n\n\nconst addUser = (newUser) => {\n   fetch('http://localhost:5000/register', {\n      method: 'POST',\n      headers: {\n         'Content-Type':'application/json'\n      },\n      body:JSON.stringify(newUser)\n   })\n   .then(resp => resp.json())\n   .then((data) => {\n      console.log(data)\n   })\n   .catch(error => console.log(error))\n   console.log(\"can\");\n};\n\nconst SignUp = (props) => {\n\n   const [dialogContent, setDialogContent] = useState(\"Sign Up\");\n   const [dialogTitle, setDialogTitle] = useState(\"Sign Up\");\n\n   const [dialogOpen, setDialogOpen] = useState(false);\n   const handleClose = () => {\n      setDialogOpen(false);\n   };\n\n   function attemptSignup() {\n\n      const username = document.getElementById('register_username')\n      const email = document.getElementById('register_email')\n      const password = document.getElementById('register_password')\n      const password2 = document.getElementById('register_password_2')\n\n      // todo check login credentials\n      let signUpSuccessful = true;\n\n      if (password.value !== password2.value) {\n         signUpSuccessful = false;\n         setDialogTitle(\"Passwords do not match!\");\n         setDialogContent(\"Please re-enter your passwords.\")\n         setDialogOpen(true);\n      }\n      else if (username.value === \"\" || email.value === \"\" || password.value === \"\" || password2.value === \"\") {\n         signUpSuccessful = false;\n         setDialogTitle(\"Some fields are empty!\");\n         setDialogContent(\"Please fill the empty field or fields.\");\n      }\n\n      const newData = {\n         \"username\": username.value,\n         \"email\": email.value,\n         \"password\": password.value\n      };\n\n      if (signUpSuccessful)\n         addUser(newData);\n\n\n      // TODO we are doing something completely different here...\n      // if successful change to main menu\n      if ( signUpSuccessful){\n         props.onSignUpHandler(ScreenIds.LOGIN_SCREEN_ID);\n      }\n\n      // otherwise reshow the login screen\n      else {\n         setDialogOpen(true);\n\n      }\n   }\n\n   function goToLogin() {\n\n      props.onSignUpHandler(ScreenIds.LOGIN_SCREEN_ID)\n   }\n\n   return (\n      <Grid container spacing={2}>\n\n         <Grid item xs={3}/>\n         <Grid item xs={6}>\n            <h1> Sign Up To Prexcel</h1>\n            <Paper style={{marginTop: '20%', marginBottom:'5%', flexDirection:'row', alignItems:'center', justifyContent:'center', backgroundColor: 'whitesmoke'}} elevation={8}>\n               <p style={{paddingTop: '5%'}}> Please fill in the following information to sign-up.</p>\n\n               <Grid style={{ marginTop: '5%', marginBottom: '5%'}} item xs={12}>\n                  <Paper sx={{backgroundColor: 'white', marginRight: '36%', marginLeft: '36%'}} elevation={4}>\n                     <TextField sx={{width:'99%', border: \"2px solid #2c778f\", borderRadius:'5px',}} data-testid=\"register_username_id\" id=\"register_username\" label=\"Username\" variant=\"filled\" required/>\n                  </Paper>\n               </Grid>\n               <Grid style={{ marginTop: '5%'}} item xs={12}>\n                  <Paper sx={{backgroundColor: 'white', marginRight: '36%', marginLeft: '36%'}} elevation={4}>\n                     <TextField sx={{width:'99%', border: \"2px solid #2c778f\", borderRadius:'5px',}} data-testid=\"register_email_id\" id=\"register_email\" label=\"Email\" variant=\"filled\" required/>\n                  </Paper>\n               </Grid>\n               <Grid style={{ marginTop: '5%'}} item xs={12}>\n                  <Paper sx={{backgroundColor: 'white', marginRight: '36%', marginLeft: '36%'}} elevation={4}>\n                     <TextField sx={{width:'99%', border: \"2px solid #2c778f\", borderRadius:'5px',}} data-testid=\"register_password_id_1\" id=\"register_password\" label=\"Password\" variant=\"filled\" required/>\n                  </Paper>\n               </Grid>\n               <Grid style={{ marginTop: '5%', marginBottom: '5%'}} item xs={12}>\n                  <Paper sx={{backgroundColor: 'white', marginRight: '36%', marginLeft: '36%'}} elevation={4}>\n                     <TextField sx={{width:'99%', border: \"2px solid #2c778f\", borderRadius:'5px',}} data-testid=\"register_password_id_2\" id=\"register_password_2\" label=\"Confirm Password\" variant=\"filled\" required/>\n                  </Paper>\n               </Grid>\n               <Grid style={{ marginTop: '5%', paddingBottom:'5%'}} item xs={12}>\n                  <Button data-testid=\"signup_button_id\" style={{ marginRight: '5%'}} variant=\"contained\" onClick={attemptSignup}>SignUp</Button>\n                  <Button data-testid=\"cancel_button_id\" variant=\"contained\" onClick={goToLogin}>Cancel</Button>\n                  <DialogBox data-testid=\"signup_error_message_id\" open={dialogOpen} onClose={handleClose}\n                             dialogContent={dialogContent}\n                             dialogTitle={dialogTitle}/>\n               </Grid>\n            </Paper>\n\n\n\n         </Grid>\n         <Grid item xs={3}/>\n\n\n\n      </Grid>\n\n\n   );\n}\n\nexport default SignUp;","import React, {useState, useEffect, useRef} from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\n\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\n\nlet transcriptRunning = false;\n\nvar interval1 = 0;\nvar interval2 = 0;\nvar interval3 = 0;\nvar interval4 = 0;\n\nexport default function LivePresentation(props) {\n\n\n   const [fd_flag, setFdFlag] = useState(\"\");\n   const [decibel_flag, setDecibel] = useState(\"\");\n   const [transcript, setTranscript] = useState(\"\");\n   const [recommendations, setRecommendations] = useState([]);\n   const [recommendation1, setRecommendation1] = useState(\"\");\n   const [recommendation2, setRecommendation2] = useState(\"\");\n   const [recommendation3, setRecommendation3] = useState(\"\");\n   const [recommendation4, setRecommendation4] = useState(\"\");\n   const [recommendation5, setRecommendation5] = useState(\"\");\n   \n\n\n   //const [tokens, setTokens] = useState(\"\");\n\n   //disable end presentation button\n   //document.getElementById(\"endPresentationButton\").disabled = true;\n   const [endButtonDisabled, setEndButtonDisabled] = useState(true);\n   const [startButtonDisabled, setStartButtonDisabled] = useState(false);\n\n   const [flagGap, setFlagGap] = useState(true);\n\n\n\n   function changeFlagGap() {\n      setFlagGap(!flagGap)\n   }\n\n   function startPresentationThreads() {\n      fetch('http://localhost:5000/startPresentation', {\n         method: 'POST',\n         headers: {\n            'Content-Type': 'application/json'\n         },\n         body:JSON.stringify(presentationData)\n      })\n         .then(resp => resp.json())\n         .then((data) => {\n            console.log(data)\n         })\n         .catch(error => console.log(error))\n   }\n\n   const presentationData = {\n      \"presentation_name\": props.newPresentationName //todo add real name\n   }\n\n   function startPresentation() {\n      //document.getElementById(\"startPresentationButton\").disabled = true;\n      //document.getElementById(\"endPresentationButton\").disabled = false;\n      setStartButtonDisabled(true);\n      setEndButtonDisabled(false);\n      startPresentationThreads();\n      //setTimeout(getFaceDetectionFlag,2000)\n      //setTimeout(getDecibel,2000)\n      getFaceDetectionFlag();\n      getDecibel();\n      getRecommendations();\n      getTranscript();\n   }\n\n   function endPresentation() {\n      clearInterval(interval1);\n      clearInterval(interval2);\n      clearInterval(interval3);\n      clearInterval(interval4);\n      setFdFlag(\"\")\n      setDecibel(\"\")\n      \n      fetch('http://localhost:5000/endPresentation', {\n         method: 'GET',\n         headers: {\n            'Content-Type': 'application/json'\n         },\n      })\n         .then(resp => resp.json())\n         .then((data) => {\n            console.log(data)\n         })\n         .catch(error => console.log(error))\n      //transcript = \"Stopped\"\n      \n      //document.getElementById(\"endPresentationButton\").disabled = true;\n      setEndButtonDisabled(true);\n   }\n\n   /* function enableTokens(){\n          setInterval(async function (){\n             await fetch('http://localhost:5000/getTranscript', {\n             method: 'GET',\n             headers: {\n                'Content-Type':'application/json'\n             },\n             })\n             .then(resp => resp.json())\n             .then((data) => {\n                setTokens(data);\n             })\n             .catch(error => console.log(error))\n          }, 500);\n    }*/\n\n   function getFaceDetectionFlag() {\n      var tempFlag = 0 \n      interval1 = setInterval(async function () {\n         await fetch('http://localhost:5000/getFaceDetectionFlag', {\n            method: 'GET',\n            headers: {\n               'Content-Type': 'application/json'\n            },\n         })\n            .then(resp => resp.json())\n            .then((data) => {\n               setFdFlag(data)\n            })\n            .catch(error => console.log(error))\n      }, 500);\n   }\n\n   function getDecibel() {\n      interval2 = setInterval(async function () {\n         await fetch('http://localhost:5000/getDecibelFlag', {\n            method: 'GET',\n            headers: {\n               'ContentType': 'application/json',\n               'Accept': 'application/json'\n            },\n         })\n            .then(resp => resp.json())\n            .then((data) => {\n               setDecibel(data)\n            })\n            .catch(error => console.log(error))\n      }, 500);\n   }\n\n   function getTranscript() {\n      interval3 = setInterval(async function () {\n         await fetch('http://localhost:5000/getTranscript', {\n            method: 'GET',\n            headers: {\n               'ContentType': 'application/json',\n               'Accept': 'application/json'\n            },\n         })\n            .then(resp => resp.json())\n            .then((data) => {\n               setTranscript(data)\n            })\n            .catch(error => console.log(error))\n      }, 500);\n   }\n\n   function getRecommendations() {\n      interval4 = setInterval(async function () {\n         await fetch('http://localhost:5000/getRecommendations', {\n            method: 'GET',\n            headers: {\n               'ContentType': 'application/json',\n               'Accept': 'application/json'\n            },\n         })\n            .then(resp => resp.json())\n            .then((data) => {\n               //setRecommendations(data)\n               if (data.length > 0)\n                  setRecommendation1(data[0]);\n               if (data.length > 1);\n                  setRecommendation2(data[1])\n               if (data.length > 2)   \n                  setRecommendation3(data[2])\n               if (data.length > 3)\n                  setRecommendation4(data[3])\n               if (data.length > 4)   \n                  setRecommendation5(data[4])\n            })\n            .catch(error => console.log(error))\n      }, 500);  \n\n   }\n\n   function goBackToMainMenu() {\n      props.onLivePresentationHandler(ScreenIds.MAIN_MENU_SCREEN_ID);\n   }\n\n   //</p> <br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> <br/><br/>\n   // <p style={{marginLeft: '5%'}}> Transcript (To be removed I believe) : {transcript} </p> <br/>\n\n   return (\n      <div>\n         <Grid container spacing={2}>\n\n            <Grid item xs={12}>\n               <h1 style={{flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>\n                  Live Presentation for \"{props.newPresentationName}\"\n               </h1>\n            </Grid>\n\n            <Grid item xs={1}/>\n            <Grid item xs={7}>\n\n               <Paper sx={{backgroundColor: 'whitesmoke'}} align=\"left\" elevation={3}>\n                  <h3> TRANSCRIPT</h3> <br/>\n                  <p> {transcript}</p> <br/>\n\n               </Paper>\n\n\n            </Grid>\n            <Grid item xs={3}>\n\n               <Paper sx={{backgroundColor: 'whitesmoke'}} align=\"left\" elevation={3}>\n                  <p style={{paddingTop: '2%', marginLeft: '5%'}}> Face Detection: {fd_flag}</p> <br/>\n                  <p style={{marginLeft: '5%'}}> Current Decibel: {decibel_flag}</p> <br/>\n\n               </Paper>\n\n               {flagGap &&\n                  <Paper style={{\n                     backgroundColor: 'whitesmoke',\n                     marginTop: '5%',\n                     marginBottom: '2%',\n                     flexDirection: 'row',\n                     alignItems: 'center',\n                     justifyContent: 'center'\n                  }} align=\"left\" elevation={3}>\n                     <h3 style={{paddingTop: '2%', marginLeft: '5%'}}> Word Recommendations</h3>\n                     <ul style={{paddingTop: '2%', paddingBottom: '2%', marginLeft: '5%'}}>\n                        <li> {recommendation1}</li>\n                        <li> {recommendation2}</li>\n                        <li> {recommendation3}</li>\n                        <li> {recommendation4}</li>\n                        <li> {recommendation5}</li>\n                     </ul>\n                  </Paper>\n               }\n\n\n            </Grid>\n            <Grid item xs={1}/>\n\n\n            <Grid item xs={2}/>\n            <Grid item xs={8}>\n               <Paper style={{\n                  backgroundColor: 'whitesmoke',\n                  marginTop: '1%',\n                  flexDirection: 'row',\n                  alignItems: 'center',\n                  justifyContent: 'center'\n               }} elevation={0}>\n\n                  <Button disabled={startButtonDisabled} id=\"startPresentationButton\" style={{ color:\"white\", margin: '1.5%'}}\n                          variant=\"contained\" onClick={startPresentation}>Start Presentation</Button>\n                  <Button disabled={endButtonDisabled} id=\"endPresentationButton\" style={{color:\"white\", margin: '1.5%'}}\n                          variant=\"contained\" onClick={endPresentation}>End Presentation</Button>\n                  <Button style={{margin: '1.5%'}} variant=\"contained\" onClick={goBackToMainMenu}>Back to Main\n                     Menu</Button>\n\n\n                  <Button style={{ margin: '1.5%'}} variant=\"contained\" onClick={changeFlagGap}>Enable Word Recommendations</Button>\n\n\n               </Paper>\n            </Grid>\n            <Grid item xs={2}/>\n\n         </Grid>\n      </div>\n\n   );\n};","import {Button, Card, Grid, List, Paper, TextField} from \"@mui/material\";\nimport ScreenIds from \"./ScreenIds\";\nimport React, {useRef, useState} from \"react\";\nimport SendIcon from '@mui/icons-material/Send';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\n\n\nexport default function ChatBotScreen(props) {\n\n   const questions = [\n      {\n         position: \"left\",\n         question: \"1. Tell Me About Yourself.\",\n         answer: 'This question seems simple, so many people fail to prepare for it, but it’s crucial. Here\\'s the deal: Don’t give your complete employment (or personal) history. Instead, give a pitch—one that’s concise and compelling and that shows exactly why you’re the right fit for the job. Muse writer and MIT career counselor Lily Zhang recommends using a present, past, future formula. Talk a little bit about your current role (including the scope and perhaps one big accomplishment), then give some background as to how you got there and experience you have that’s relevant. Finally, segue into why you want—and would be perfect for—this role.',\n         color: \"lightblue\"\n      },\n      {\n         position: \"left\",\n         question: \"2. How Did You Hear About This Position?\",\n         answer: 'Another seemingly innocuous interview question, this is actually a perfect opportunity to stand out and show your passion for and connection to the company. For example, if you found out about the gig through a friend or professional contact, name-drop that person, then share why you were so excited about the job. If you discovered the company through an event or article, share that. Even if you found the listing through a random job board, share what, specifically, caught your eye about the role.',\n         color: \"lightblue\"\n      },\n      {\n         position: \"left\",\n         question: \"3. Why Do You Want to Work at This Company?\",\n         answer: 'Beware of generic answers! If what you say can apply to a whole slew of other companies, or if your response makes you sound like every other candidate, you’re missing an opportunity to stand out. Zhang recommends one of four strategies: Do your research and point to something that makes the company unique that really appeals to you; talk about how you’ve watched the company grow and change since you first heard of it; focus on the organization’s opportunities for future growth and how you can contribute to it; or share what’s gotten you excited from your interactions with employees so far. Whichever route you choose, make sure to be specific. And if you can’t figure out why you’d want to work at the company you’re interviewing with by the time you’re well into the hiring process? It might be a red flag telling you that this position is not the right fit.',\n         color: \"lightblue\"\n      },\n      {\n         position: \"left\",\n         question: \"4. Why Do You Want This Job?\\n\",\n         answer: 'Again, companies want to hire people who are passionate about the job, so you should have a great answer about why you want the position. (And if you don’t? You probably should apply elsewhere.) First, identify a couple of key factors that make the role a great fit for you (e.g., “I love customer support because I love the constant human interaction and the satisfaction that comes from helping someone solve a problem”), then share why you love the company (e.g., “I’ve always been passionate about education, and I think you’re doing great things, so I want to be a part of it”).',\n         color: \"lightblue\"\n      },\n      {\n         position: \"left\",\n         question: \"5:   Question 5 LooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNG\",\n         answer: 'Answer 5 LoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNG',\n         color: \"lightblue\"\n      },\n      {\n         position: \"left\",\n         question: \"6:   Question 6 heheh heheh hehe hehe ehhe ehh eheheh ehehhe ehhehe ehheh ehhehe hehehe ehhehe \",\n         answer: 'Answer 6 ehbehbehehe ehbheb hebhe hebhehb  hbehhehb  bhehehbhehb hebhhe',\n         color: \"lightblue\"\n      }\n   ];\n\n   function initializeChatBotMessage() {\n      let msgObj = [{\n         position: \"left\",\n         question: \"\",\n         color: \"#2979ff\"\n      }];\n      for (let i in questions) {\n         msgObj[0].question = msgObj[0].question + questions[i].question + \"\\n\";\n         //console.log(msgObj[0].question);\n      }\n      return msgObj;\n   }\n\n   const [messageList, setMessageList] = useState(initializeChatBotMessage);\n\n   const [newQuestionNumber, setNewQuestionNumber] = useState(0);\n   const [value, setValue] = useState('');\n\n   /////\n   const ref = useRef();\n\n   function scrollToTop() {\n      if (ref.current) {\n         ref.current.scrollIntoView({behavior: \"smooth\", block: \"end\"});\n      }\n   }\n   /////\n\n\n   function goBackToMainMenu() {\n      props.onChatBot(ScreenIds.MAIN_MENU_SCREEN_ID);\n   }\n\n   function ChatItem(props) {\n\n      const rootStyle = {\n         width: \"100%\",\n         height: \"auto\",\n         marginTop: \"0%\",\n         marginBottom: \"0%\"\n      };\n\n      const messageStyle = {\n         width: \"51%\",\n         marginTop: \"1.5%\",\n         marginBottom: '1.5%',\n         height: \"auto\",\n         float: props.position,\n         background: props.color,\n         color: \"#E5E5E5\",\n\n         overflowWrap: \"break-word\",\n         wordWrap: \"break-word\",\n         //hyphens: \"auto\"\n      };\n\n      return (\n         <div style={rootStyle}>\n            <Card elevation={8} style={messageStyle}>{props.text.split('\\n').map(str => <p\n               style={{marginLeft: '5%', marginRight: '5%'}}>{str}</p>)}</Card>\n         </div>\n      );\n   }\n\n   function makeKey() {\n      const key = Math.random().toString(16).substr(2);\n      return key;\n   }\n\n   function TextList(props) {\n\n      const key0 = makeKey();\n\n      return (\n         <List>\n            {props.messageList.map((message) => (\n               <ChatItem key={key0.toString()} position={message.position} color={message.color} text={message.question}/>))}\n         </List>\n      );\n   }\n\n   function deleteMessages() {\n      setMessageList(initializeChatBotMessage);\n   }\n\n   const questionAskHandler = (event) => {\n      setNewQuestionNumber(event.target.value);\n      setValue(event.target.value);\n   };\n\n   function questionSubmitHandler(event) {\n      event.preventDefault();\n\n      const newQuestionNumberText = {\n         position: \"right\",\n         question: newQuestionNumber.toString(),\n         color: \"gray\"\n      };\n\n      let answ = \"\";\n\n      console.log(isNaN(newQuestionNumber));\n\n      if (isNaN(newQuestionNumber))\n         answ = \"Please enter a valid question number\"; // string is not numeric\n      else if (newQuestionNumber < 1 || newQuestionNumber > questions.length)\n         answ = answ + \"Answer to the question \" + newQuestionNumber + \" is NOT available.\";\n      else\n         answ = answ + questions[newQuestionNumber - 1].answer;\n\n      const newAnswer = {\n         position: \"left\",\n         question: answ,\n         color: \"#2979ff\"\n      };\n      const newList = [...messageList, newQuestionNumberText, newAnswer];\n      setMessageList(newList);\n\n      setValue(\"\"); // clears the input field\n   }\n\n   return (\n      <div>\n         <Grid container spacing={2}>\n\n            <Grid item xs={3}/>\n            <Grid item xs={6} style={{height: \"100vh\"}}>\n\n               <h1 style={{flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>\n                  ChatBot\n               </h1>\n\n               <Paper\n                  elevation={8}\n                  sx={{\n\n                     height: '65%',\n                     maxHeight: '65%',\n                     overflow: \"auto\",\n                     marginTop: '5%',\n                     marginBottom: '5%',\n                     alignItems: 'center',\n                     justifyContent: 'center',\n                     backgroundColor: 'whitesmoke'\n                  }}\n                  className=\"App\"\n               >\n                  <TextList messageList={messageList}/>\n                  <div ref={ref}/>\n               </Paper>\n\n               <form onSubmit={questionSubmitHandler}>\n                  <Button onClick={scrollToTop} style={{color:\"#2979ff\"}} size=\"large\" endIcon={<ArrowUpwardIcon/>} variant=\"text\"> </Button>\n                  <TextField size=\"small\" sx={{\n                     marginLeft: '1%',\n                     marginRight: '1%',\n                     alignItems: 'center',\n                     border: \"2px solid #507786\",\n                     borderRadius: '5px',\n                     backgroundColor: 'whitesmoke'\n                  }} value={value} onChange={questionAskHandler} required\n                             label=\"Enter question no\"\n                             variant=\"filled\"/>\n\n                  <Button size=\"large\" type=\"submit\" endIcon={<SendIcon/>} style={{fontSize:'119%'}}\n                          variant=\"contained\">send</Button><br/>\n\n               </form>\n               <Button style={{marginTop: '2%', marginRight:'1%'}} variant=\"contained\"\n                       onClick={deleteMessages}>Clear</Button>\n               <Button data-testid=\"main_menu_button_id\" style={{marginTop: '2%', marginLeft:'1%'}} variant=\"contained\"\n                       onClick={goBackToMainMenu}>Main Menu</Button>\n            </Grid>\n            <Grid item xs={3}/>\n\n         </Grid>\n      </div>\n   );\n}\n//<Paper sx={{marginLeft:'40%', marginRight:'40%', alignItems:'center', backgroundColor: 'lightblue'}} elevation={4}>","import React, { useState, useEffect, useRef } from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\n\n\n\n// TODO\nconst deleteUser = (currUser) => {\n\n   return false;\n};\n\nconst UserAccountDetails = (props) => {\n\n   const [id, setID] = useState([]);\n   const [username, setUsername] = useState([]);\n   const [presentationCount, setPresentationCount] = useState([]);   \n   const [email, setEmail] = useState([]);   \n\n   // TODO\n   function attemptDelete() {\n\n      const currUser = null; // TODO\n      let deleteSuccessful = deleteUser( currUser);\n\n      // if successful change to main menu\n      if ( deleteSuccessful){\n         goToLogin();\n      }\n\n      else {\n         // todo display signup failed message\n\n      }\n   }\n\n   function goToLogin() {\n      props.onUserAccountDetailsHandler(ScreenIds.LOGIN_SCREEN_ID);\n   }\n\n   function goToMainMenu(){\n      props.onUserAccountDetailsHandler(ScreenIds.MAIN_MENU_SCREEN_ID);\n   }\n\n   function getUserInfo(){\n      let success = true;\n      fetch('http://localhost:5000/getUserInfo', {\n         method: 'GET',\n         headers: {\n            'Content-Type':'application/json'\n         },\n\n      })\n         .then((resp) => {\n            return resp.json()\n         })\n         .then((data) => {\n            setUsername(data[0])\n            setEmail(data[2])\n            setID(data[3])\n            setPresentationCount(data[4])\n         })\n         .catch(error => console.log(error))\n\n      return success;\n   };\n\n   getUserInfo();\n\n\n   return (\n      <Grid container spacing={2}>\n         <Grid item xs={3}/>\n         <Grid item xs={6}>\n            <h1 style={{color:'white'}}>Account details</h1>\n            <Paper style={{backgroundColor:'whitesmoke', marginTop: '20%', marginBottom:'5%', flexDirection:'row', alignItems:'center', justifyContent:'center'}} elevation={3}>\n               <p style={{color:'black', paddingTop: '5%'}}> Your current account details are as follows:</p>\n               <Grid style={{ marginTop: '5%' , marginLeft:'5%'}} item xs={12} align=\"left\">\n                  <p style={{color:'black'}}> <b>User name:</b> {username}</p>\n               </Grid>\n               <Grid style={{ marginTop: '5%' , marginLeft:'5%'}} item xs={12} align=\"left\">\n                  <p style={{color:'black'}}><b>User id:</b> {id}</p>\n               </Grid>\n               <Grid style={{ marginTop: '5%', marginLeft:'5%'}} item xs={12} align=\"left\">\n                  <p style={{color:'black'}}><b>Number of presentations in your account:</b> {presentationCount}</p>\n               </Grid>\n               <Grid style={{ marginTop: '5%', marginLeft:'5%'}} item xs={12} align=\"left\">\n                  <p style={{color:'black'}}><b>E-mail address:</b> {email}</p>\n               </Grid>\n               <Grid style={{ color:'black', marginTop: '5%', marginBottom: '5%'}} item xs={12}>\n                     You may delete your account, but beware, this process cannot be reversed!\n               </Grid>\n               <Grid style={{ marginTop: '5%', paddingBottom:'5%'}} item xs={12}>\n                  <Button style={{marginRight: '5%'}} variant=\"contained\" onClick={attemptDelete}>Delete Account</Button>\n                  <Button data-testid=\"user_account_details_button_id\" variant=\"contained\" onClick={goToMainMenu}>Back To Main Menu</Button>\n               </Grid>\n            </Paper>\n         </Grid>\n         <Grid item xs={3}/>\n\n\n\n      </Grid>\n\n\n   );\n}\n\nexport default UserAccountDetails;","import React, {useState, useEffect, useRef} from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\nimport {\n   Button,\n   Dialog,\n   DialogActions,\n   DialogContent,\n   DialogContentText,\n   DialogTitle,\n   Grid,\n   Paper,\n   TextField\n} from \"@mui/material\";\nimport DialogBox from \"./DialogBox\";\n\n\nexport default function NewPresentation(props) {\n\n   const [dialogOpen, setDialogOpen] = useState(false);\n   const handleClose = () => {\n      setDialogOpen(false);\n   };\n\n   function goToMainMenu() {\n\n      props.onNewPresentationHandler(ScreenIds.MAIN_MENU_SCREEN_ID)\n   }\n\n   // TODO for goToLivePresentation, goToUploadPresentation pass the presentation name as prop as well\n   function goToLivePresentation() {\n      const name = document.getElementById('presentation_name').value;\n      if (name.length > 0) {\n         props.onNewPresentationName(name);\n         props.onNewPresentationHandler(ScreenIds.CHECK_CAMERA);\n      } else {\n         console.log(\"dialog box opening\");\n         setDialogOpen(true);\n      }\n\n   }\n\n   function goToCheckCamera() {\n      const name = document.getElementById('presentation_name').value;\n      if (name.length > 0) {\n         props.onNewPresentationName(name);\n         props.onNewPresentationHandler(ScreenIds.CHECK_CAMERA)\n      } else {\n         console.log(\"dialog box opening\");\n         setDialogOpen(true);\n      }\n\n   }\n\n   // todo\n   function goToUploadPresentation() {\n\n      const name = document.getElementById('presentation_name').value;\n      if (name.length > 0) {\n         props.onNewPresentationName(name);\n         props.onNewPresentationHandler(ScreenIds.UPLOAD_PRESENTATION_SCREEN_ID);\n      } else {\n         console.log(\"dialog box opening\");\n         setDialogOpen(true);\n      }\n\n      // props.onNewPresentationHandler(ScreenIds.PROCESSING_PRESENTATION_SCREEN_ID)\n   }\n\n   return (\n      <Grid container spacing={2}>\n\n         <Grid item xs={3}/>\n         <Grid item xs={6}>\n            <h1> Create A New Presentation...</h1>\n            <Paper style={{\n               marginTop: '20%',\n               marginBottom: '5%',\n               flexDirection: 'row',\n               alignItems: 'center',\n               justifyContent: 'center',\n               backgroundColor: 'whitesmoke'\n            }} elevation={8}>\n               <p style={{color: 'black', paddingTop: '5%'}}> Enter the name for your presentation:</p>\n\n               <Grid style={{marginTop: '5%'}} item xs={12}>\n                  <Paper sx={{ marginRight: '33%', marginLeft: '33%'}} elevation={4}>\n                     <TextField sx={{width: '99%', border: \"2px solid #2c778f\", borderRadius: '5px',}}\n                                id=\"presentation_name\" label=\"Name of the presentation\"\n                                variant=\"filled\"/>\n                  </Paper>\n               </Grid>\n\n               <Grid style={{marginTop: '5%', paddingBottom: '5%'}} item xs={12}>\n                  <Button style={{ marginRight: '5%'}} variant=\"contained\"\n                          onClick={goToLivePresentation}>Perform a Live Presentation</Button>\n                  <Button style={{ marginRight: '5%'}} variant=\"contained\"\n                          onClick={goToUploadPresentation}>Upload a Recording</Button>\n                  <Button data-testid=\"new_presentation_cancel_button_id\" variant=\"contained\"\n                          onClick={goToMainMenu}>Cancel</Button>\n                  <DialogBox open={dialogOpen} onClose={handleClose}\n                             dialogContent={\"Please enter a presentation name to continue.\"}\n                             dialogTitle={\"Presentation name is required!\"}/>\n               </Grid>\n\n\n            </Paper>\n\n         </Grid>\n         <Grid item xs={3}/>\n\n\n      </Grid>\n\n\n   );\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\nimport { useFilePicker } from 'use-file-picker';\n\nexport default function UploadRecordingScreen(props) {\n\n   const [flagPresentationSelector, setFlagPresentationSelector] = useState(false);\n   const [flagPresentationProcessed, setPresentationProcessed] = useState(false);\n\n   const [flagProcessingPresentation, setFlagProcessingPresentation] = useState(false);\n   let path = \"\"\n\n   /*const [openFileSelector, { filesContent, loading }] = useFilePicker({\n      accept: '.txt',\n      readAs: 'DataURL'\n   });*/\n\n   function goToMainMenu() {\n      props.onUploadPresentationHandler(ScreenIds.MAIN_MENU_SCREEN_ID)\n   }\n\n   // todo to the presentation details of the last processed presentation\n   function goToPresentationDetails() {\n\n      // go to the details of the presentation that was processed\n      props.onUploadPresentationHandler(ScreenIds.PRESENTATION_DETAILS_SCREEN_ID);\n   }\n\n   // todo\n   function processRecording() {\n      setFlagProcessingPresentation(true);\n\n      props.uploadHandler(false);\n\n      props.onUploadPresentationHandler(ScreenIds.LOADING_SCREEN);\n\n      // todo set the flag processing presentation such that no other button is clickable while presentation is being processed.\n      const processPresentation = (presentationData) => {\n         fetch('http://localhost:5000/processUploadedPresentation', {\n            method: 'POST',\n            headers: {\n               'Content-Type':'application/json'\n            },\n            body:JSON.stringify(presentationData)\n         })\n         .then((resp) => {\n            console.log(resp.json())\n\n            props.uploadHandler(true);\n\n            return resp.json()\n         })\n\n         .catch(error => console.log(error))\n      };\n\n      const presentationData = {\n         \"path\": path,\n         \"presentation_name\": props.newPresentationName, //todo add real name\n      }\n\n\n      processPresentation(presentationData);\n\n      // todo Alternatively, switch them to a new page and remove the continue to report details  button\n\n      // TODO LOGIC HERE\n      setPresentationProcessed(true);\n   }\n\n   function onFileSelected(){\n      setFlagPresentationSelector(true);\n      console.log(\"called function\");\n      let file = document.getElementById(\"file\") \n      if(file){\n         path = file.files[0].path;\n         console.log(\"in if\");\n      }\n   }\n   /*async function selectPresentation(){\n      //console.log(dialog.showOpenDialog({properties: ['openFile', 'openDirectory', 'multiSelections']}))\n      const dir = await window.showDirectoryPicker();\n      console.log(\"can\");\n      console.log(dir.getFileHandle());\n      //openFileSelector();\n      setFlagPresentationSelector(true);\n   }*/\n\n   return (\n      <Grid container spacing={2}>\n\n         <Grid item xs={2}/>\n         <Grid item xs={8}>\n            <h1>Select a Recording To Analyze...</h1>\n            <Paper style={{backgroundColor:'whitesmoke', marginTop: '20%', marginBottom:'5%', flexDirection:'row', alignItems:'center', justifyContent:'center'}} elevation={3}>\n               <p style={{paddingTop: '5%'}}>Name of the presentation: {props.newPresentationName}</p>\n               <input id=\"file\" type=\"file\" onChange={onFileSelected} onInput={onFileSelected}/>\n\n               <Grid style={{ marginTop: '5%', paddingBottom:'5%'}} item xs={12}>\n\n                  <Button style={{ margin: '5%'}} variant=\"contained\" onClick={goToMainMenu}>Cancel</Button>\n\n                  {/* flagPresentationSelector === false &&\n                     <Button style={{ margin: '5%'}} variant=\"contained\" onClick={selectPresentation}>Select a Recording</Button>\n   */}\n                  {/* flagPresentationSelector &&\n                     <Button style={{ margin: '5%'}} variant=\"contained\" onClick={() => selectPresentation}>Reselect a Recording</Button>\n*/}\n\n                  { flagPresentationSelector === false &&\n                     <Button style={{ margin: '5%'}} variant=\"contained\" disabled>Process The Recording</Button>\n                  }\n\n                  { flagPresentationSelector &&\n                     <Button style={{ margin: '5%'}} variant=\"contained\" onClick={processRecording}>Process The Recording</Button>\n                  }\n\n                  { /*flagPresentationProcessed &&\n                     <Button style={{ margin: '5%'}} variant=\"contained\" onClick={goToPresentationDetails}>Continue to the Report</Button>\n                  */}\n\n                  {/* flagPresentationSelector && flagProcessingPresentation && flagPresentationProcessed === false &&\n                     <Button style={{ margin: '5%'}} variant=\"contained\" disabled>Your presentation is being processed...</Button>\n                  */}\n                  {/* flagPresentationSelector === false &&\n                     <Button style={{ marginRight: '5%'}} variant=\"contained\" disabled>Continue to the Report</Button>\n                  */}\n\n               </Grid>\n            </Paper>\n\n         </Grid>\n         <Grid item xs={2}/>\n\n\n\n      </Grid>\n\n\n   );\n}","import {Button, Grid, Paper} from \"@mui/material\";\nimport ScreenIds from \"./ScreenIds\";\nimport * as React from \"react\";\nimport { Chart, registerables } from 'chart.js';\n\nimport {Line} from 'react-chartjs-2';\n\nexport default function ProgressTracking(props) {\n\n   Chart.register(...registerables);\n\n   function formData(objArr, dataType) {\n      let data = [];\n      for (const obj of objArr) {\n         data.push(returnDataObj(obj, dataType));\n      }\n      return data;\n   }\n\n   function returnDataObj(obj, dataType) {\n      if (dataType === \"name\")\n         return obj.name;\n      else if (dataType === \"fd_score\")\n         return obj.fd_score;\n      else if (dataType === \"grade\")\n         return (Math.round(100 * obj.grade * 100) / 100).toFixed(2);\n      else if (dataType === \"gap\")\n         return (Math.round(100 * (1 - obj.gap_ratio) * 100) / 100).toFixed(2);\n      else if (dataType === \"filler\")\n         return (Math.round(100 * (1 - obj.filler_ratio) * 100) / 100).toFixed(2);\n   }\n\n   const state = {\n      labels: formData(props.selectedPresentations, \"name\"),\n      datasets: [\n         {\n            label: 'Final Grade',\n            fill: false,\n            lineTension: 0,\n            backgroundColor: 'black',\n            borderColor: 'black',\n            borderWidth: 2,\n            data: formData(props.selectedPresentations, \"grade\")\n         },\n         {\n            label: 'Face Detection Score',\n            fill: false,\n            lineTension: 0,\n            backgroundColor: '#0d98ba',\n            borderColor: '#0d98ba',\n            borderWidth: 2,\n            data: formData(props.selectedPresentations, \"fd_score\")\n         },\n         {\n            label: 'Gap Score',\n            fill: false,\n            lineTension: 0,\n            backgroundColor: '#56358a',\n            borderColor: '#56358a',\n            borderWidth: 2,\n            data: formData(props.selectedPresentations, \"gap\")\n         },\n         {\n            label: 'Filler Score',\n            fill: false,\n            lineTension: 0,\n            backgroundColor: 'green',\n            borderColor: 'green',\n            borderWidth: 2,\n            data: formData(props.selectedPresentations, \"filler\")\n         }\n      ]\n   }\n\n   function goToMyPresentations() {\n      props.onProgressTracking(ScreenIds.MY_PRESENTATIONS_SCREEN_ID);\n   }\n\n   function PresentationInstance(pName, pDate) {\n\n      return <li>  <p> {pName}  -  {pDate} </p> </li>;\n   }\n\n   return (\n      <div>\n         <Grid container spacing={2}>\n\n            <Grid item xs={12}>\n               <h1>Progress Tracking</h1>\n            </Grid>\n\n            <Grid item xs={1}/>\n            <Grid item xs={7}>\n\n               <Paper sx={{backgroundColor:'#E5E5E5', padding:'3%'}} elevation={8}>\n                  <Line\n                     data={state}\n                     options={{\n                        title:{\n                           display:true,\n                           text:'Average Rainfall per month',\n                           fontSize:20\n                        },\n                        legend:{\n                           display:true,\n                           position:'right'\n                        }\n                     }}\n                  />\n               </Paper>\n\n               <Button variant=\"contained\" onClick={goToMyPresentations}>Back</Button>\n\n            </Grid>\n            <Grid item xs={3}>\n               <Paper sx={{backgroundColor:'#E5E5E5', padding:'1%'}} elevation={8}>\n                  <ul align=\"left\">\n                     { (props.selectedPresentations).map(item => (\n                        PresentationInstance(item.name, new Date(String(item.p_date)).toDateString() )))\n                     }\n                  </ul>\n               </Paper>\n\n            </Grid>\n            <Grid item xs={1}/>\n\n         </Grid>\n      </div>\n   );\n}","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {render} from \"react-dom\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport ScreenIds from \"./ScreenIds\";\r\n\r\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\r\n\r\nconst CheckCamera = (props) => {\r\n\r\n   const [playing, setPlaying] = useState(false);\r\n\r\n\r\n   function startVideo() {\r\n      setPlaying(true);\r\n      navigator.getUserMedia(\r\n         {\r\n            video: true,\r\n         },\r\n         (stream) => {\r\n            let video = document.getElementsByClassName(\"app__videoFeed\")[0];\r\n            if (video) {\r\n               video.srcObject = stream;\r\n            }\r\n         },\r\n         (err) => console.error(err)\r\n      );\r\n   }\r\n\r\n   function stopVideo() {\r\n      setPlaying(false);\r\n      let video = document.getElementsByClassName(\"app__videoFeed\")[0];\r\n      video.srcObject.getTracks()[0].stop();\r\n   }\r\n\r\n   // todo\r\n   function goToLivePresentation(){\r\n\r\n      props.onCheckCameraHandler(ScreenIds.LIVE_PRESENTATION_FEEDBACK_SCREEN_ID);\r\n   }\r\n\r\n\r\n   return (\r\n      <div>\r\n         <Grid container spacing={2}>\r\n            <Grid item xs={12} >\r\n               <h1 style={{flexDirection:'row', alignItems:'center', justifyContent:'center'}} >\r\n                  Prexcel\r\n               </h1><br/>\r\n               <h1 style={{flexDirection:'row', alignItems:'center', justifyContent:'center'}} >The Multifunctional Presentation Assistant\r\n               </h1><br/>\r\n            </Grid>\r\n            <Grid item xs={2}/>\r\n            <Grid item xs={8}>\r\n               <Paper sx={{marginTop: '1.7%', backgroundColor: 'dimgray'}} align=\"center\"\r\n                      elevation={1}>\r\n                  <video  width='80%' muted autoPlay className=\"app__videoFeed\"/><br/>\r\n               </Paper>\r\n\r\n               {playing ? (\r\n                  <Button style={{marginTop:\"3%\"}} variant=\"contained\" onClick={stopVideo}> Stop Camera </Button>) : (\r\n                  <Button style={{marginTop:\"3%\"}} variant=\"contained\" onClick={startVideo}> Start Camera </Button>)}\r\n\r\n               {!playing &&\r\n                  <Button style={{marginLeft:\"3%\", marginTop:\"3%\"}} variant=\"contained\" onClick={goToLivePresentation}>Continue To Presentation</Button>}\r\n\r\n               {playing &&\r\n                  <Button style={{marginLeft:\"3%\", marginTop:\"3%\"}} disabled variant=\"contained\">Cannot Proceed to Presentation While Your Camera is Open</Button>}\r\n\r\n            </Grid>\r\n            <Grid item xs={2}/>\r\n         </Grid>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default CheckCamera;","import React, { useState, useEffect, useRef } from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\nimport { useFilePicker } from 'use-file-picker';\n\nexport default function UploadPresentationLoading(props) {\n\n\n   //const [processingDone, setProcessingDone] = useState(false);\n\n\n   function goToMainMenu() {\n      props.onPresentationLoadingHandler(ScreenIds.MAIN_MENU_SCREEN_ID)\n   }\n\n   // todo I think we scrape this off, just send the user back to my presentations or main menu\n   function goToPresentationDetails() {\n      console.log(\":(\");\n   }\n\n   /*function setProcessingState(){\n      setProcessingDone(!processingDone);\n   }*/\n\n   // <Button style={{margin: '5%'}} variant=\"contained\" onClick={setProcessingState}>Set Recording Processed\n   //                      (Demo/TB Removed)</Button>\n\n   const processingNotDone =\n      <Grid container spacing={2}>\n            <Grid item xs={2} />\n            <Grid item xs={8}>\n               <h1>Processing Your Presentation...</h1>\n               <Paper style={{\n                  backgroundColor: '#E5E5E5',\n                  marginTop: '20%',\n                  marginBottom: '5%',\n                  flexDirection: 'row',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  paddingTop: '2%',\n               }} elevation={3}>\n                  <p style={{margin: \"2%\"}}> <i> Please wait while your presentation is being processed... </i> </p>\n\n                  <Button style={{margin: '5%'}} variant=\"contained\" onClick={goToMainMenu}>Cancel</Button>\n               </Paper>\n\n            </Grid>\n            <Grid item xs={2}/>\n      </Grid>;\n\n   const processingFinished =\n      <Grid container spacing={2}>\n\n         <Grid item xs={2}/>\n         <Grid item xs={8}>\n            <h1>Your presentation is processed!</h1>\n            <Paper style={{\n               backgroundColor: '#E5E5E5',\n               marginTop: '20%',\n               marginBottom: '5%',\n               flexDirection: 'row',\n               alignItems: 'center',\n               justifyContent: 'center',\n               paddingTop: '2%',\n            }} elevation={3}>\n               <p style={{margin: \"2%\"}}> You can now find your presentation under the MyPresentations screen. </p>\n\n               <Button style={{margin: '5%'}} variant=\"contained\" onClick={goToMainMenu}>Continue To Main Menu</Button>\n            </Paper>\n\n         </Grid>\n         <Grid item xs={2}/>\n\n      </Grid>;\n\n\n   return (\n      <Grid container spacing={2}>\n         { !props.uploadDone &&\n            processingNotDone\n         }\n         { props.uploadDone &&\n            processingFinished\n         }\n\n      </Grid>\n\n\n\n   );\n}","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {render} from \"react-dom\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport ScreenIds from \"./ScreenIds\";\r\n\r\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\r\n\r\nconst TutorialApp = (props) => {\r\n\r\n   function goBackToMainMenu(){\r\n      props.onTutorialAppHandler(ScreenIds.MAIN_MENU_SCREEN_ID);\r\n   }\r\n\r\n   return (\r\n      <div>\r\n         <Grid container spacing={2}>\r\n            <Grid item xs={12} >\r\n               <h1 style={{flexDirection:'row', alignItems:'center', justifyContent:'center', marginTop:\"2%\"}} >\r\n                  TUTORIAL ON PREXCEL\r\n               </h1>\r\n            </Grid>\r\n            <Grid item xs={2}/>\r\n            <Grid item xs={8}>\r\n               <Paper style={{backgroundColor:'whitesmoke', padding:\"5%\", marginTop: '2.5%', marginBottom:'5%', flexDirection:'row', alignItems:'center', justifyContent:'center'}} elevation={8}>\r\n                  <h3>How to Use Prexcel</h3>\r\n                  <p>text</p>\r\n                  <h3>How Prexcel Evaluates Presentations</h3>\r\n                  <p>text</p>\r\n                  <h3>How Does Live Feedback Work?</h3>\r\n                  <p>text</p>\r\n               </Paper>\r\n\r\n               <Button style={{ marginBottom: '5%'}} variant=\"contained\" onClick={goBackToMainMenu}>Go Back</Button>\r\n\r\n            </Grid>\r\n            <Grid item xs={2}/>\r\n         </Grid>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default TutorialApp;","import React, { useState, useEffect, useRef } from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\n\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\n\nconst TutorialPresentation = (props) => {\n\n   function goBackToMainMenu(){\n      props.onTutorialPresentationHandler(ScreenIds.MAIN_MENU_SCREEN_ID);\n   }\n\n   return (\n      <div>\n         <Grid container spacing={2}>\n            <Grid item xs={12} >\n               <h1 style={{flexDirection:'row', alignItems:'center', justifyContent:'center', marginTop:\"2%\"}} >\n                  TUTORIAL ON GIVING A PRESENTATION\n               </h1>\n            </Grid>\n            <Grid item xs={2}/>\n            <Grid item xs={8}>\n               <Paper style={{backgroundColor:'whitesmoke', padding:\"5%\", marginTop: '2.5%', marginBottom:'5%', flexDirection:'row', alignItems:'center', justifyContent:'center'}} elevation={8}>\n                  <h3>Important Points About Presentations</h3>\n                  <p>text</p>\n                  <h3>Look To The Camera!</h3>\n                  <p>text</p>\n                  <h3>How to Speak Effectively?</h3>\n                  <p>text</p>\n               </Paper>\n\n               <Button data-testid=\"tutorial_presentation_cancel_button_id\" style={{ marginBottom: '5%'}} variant=\"contained\" onClick={goBackToMainMenu}>Go Back</Button>\n\n            </Grid>\n            <Grid item xs={2}/>\n         </Grid>\n      </div>\n   );\n};\n\nexport default TutorialPresentation;","// todo remove\nimport logo from './logo.svg';\n\n\nimport {\n   HashRouter as Router,\n   Route,\n   Routes,\n   Link,\n   Redirect,\n   // withRouter\n} from \"react-router-dom\";\n\nimport React, {useState} from \"react\";\nimport './App.css';\nimport Login from \"./pages/Login\";\nimport MainMenu from \"./pages/MainMenu\";\nimport MyPresentations from \"./pages/MyPresentations\";\nimport PresentationDetails from \"./pages/PresentationDetails\";\nimport TranscriptDetails from \"./pages/TranscriptDetails\";\nimport SignUp from \"./pages/SignUp\";\nimport LivePresentation from \"./pages/LivePresentation\";\nimport ChatBot from \"./pages/ChatBot\";\n\nimport ScreenIds from \"./pages/ScreenIds\";\nimport UserAccountDetails from \"./pages/UserAccountDetails\";\nimport NewPresentation from \"./pages/NewPresentation\";\nimport UploadRecordingScreen from \"./pages/UploadRecordingScreen\";\nimport ProgressTracking from \"./pages/ProgressTracking\";\nimport CheckCamera from \"./pages/CheckCamera\";\nimport UploadPresentationLoading from \"./pages/UploadPresentationLoading\";\nimport TutorialApp from \"./pages/TutorialApp\";\nimport TutorialPresentation from \"./pages/TutorialPresentation\";\n\nfunction App() {\n\n   const [processedTranscriptArr, setTranscriptArr] = useState([]);\n\n   const [currentScreen, setCurrentScreen] = useState(ScreenIds.LOGIN_SCREEN_ID);\n   const [currentUserID, setCurrentUserID] = useState(0);\n\n   const [selectedPresentations, setSelectedPresentations] = useState([]);\n   const [newPresentationName, setNewPresentationName] = useState(\"\");\n\n   const [uploadDone, setUploadDone] = useState(false);\n\n   function uploadHandler(uploadDone) {\n      setUploadDone(uploadDone);\n   }\n\n   function processTranscriptHandler (transcript) {\n      setTranscriptArr(transcript);\n   }\n\n   function changeViewHandler(newScreenId) {\n      setCurrentScreen(newScreenId);\n   }\n\n   function userIdHandler(newUserId) {\n      setCurrentUserID(newUserId);\n   }\n\n   function presentationSelectionHandler(presentations) {\n      setSelectedPresentations(presentations);\n   }\n\n   function newPresentationNameHandler(newPresentationName) {\n      setNewPresentationName(newPresentationName);\n   }\n\n   const UIViewController = () => {\n      if (currentScreen === ScreenIds.LOGIN_SCREEN_ID)\n         return <Login onUserIdHandler={userIdHandler} onLoginHandler={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.MAIN_MENU_SCREEN_ID)\n         return <MainMenu onMainMenuHandler={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.MY_PRESENTATIONS_SCREEN_ID)\n         return <MyPresentations currentUserID={currentUserID} onPresentationSelection={presentationSelectionHandler} onMyPresentationsHandler={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.LIVE_PRESENTATION_FEEDBACK_SCREEN_ID)\n         return <LivePresentation newPresentationName={newPresentationName} currentUserID={currentUserID} onLivePresentationHandler={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.PRESENTATION_DETAILS_SCREEN_ID)\n         return <PresentationDetails processTranscriptHandler={processTranscriptHandler} selectedPresentations={selectedPresentations} onPresentationDetails={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.TRANSCRIPT_DETAILS_SCREEN_ID)\n         return <TranscriptDetails processedTranscriptArr={processedTranscriptArr} selectedPresentations={selectedPresentations} onTranscriptDetails={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.SIGNUP_SCREEN_ID)\n         return <SignUp onSignUpHandler={changeViewHandler}/>\n      else if (currentScreen === ScreenIds.CHAT_BOT_SCREEN_ID)\n         return <ChatBot onChatBot={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.USER_ACC_DETAILS_SCREEN_ID)\n         return <UserAccountDetails onUserAccountDetailsHandler={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.NEW_PRESENTATION_ID)\n         return <NewPresentation onNewPresentationName={newPresentationNameHandler} onNewPresentationHandler={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.UPLOAD_PRESENTATION_SCREEN_ID)\n         return <UploadRecordingScreen uploadHandler={uploadHandler} newPresentationName={newPresentationName} onUploadPresentationHandler={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.PROGRESS_TRACKING_SCREEN_ID)\n         return <ProgressTracking selectedPresentations={selectedPresentations} onProgressTracking={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.CHECK_CAMERA)\n         return <CheckCamera onCheckCameraHandler={changeViewHandler} />;\n      else if (currentScreen === ScreenIds.LOADING_SCREEN)\n         return <UploadPresentationLoading uploadDone={uploadDone} onPresentationLoadingHandler={changeViewHandler} />;\n      else if (currentScreen === ScreenIds.TUTORIAL_APP_SCREEN_ID)\n         return <TutorialApp onTutorialAppHandler={changeViewHandler} />;\n      else if (currentScreen === ScreenIds.TUTORIAL_PRESENTATION_SCREEN_ID)\n          return <TutorialPresentation onTutorialPresentationHandler={changeViewHandler} />;\n   }\n\n//  function navigate() {\n//    if (currentScreen === 0)\n//      return <Login onLoginHandler={newScreenHandler}/>;\n//    else if (currentScreen === 1)\n//      return <MainMenu onMainMenuHandler={newScreenHandler}/>;\n//    else if (currentScreen === 2)\n//      return <MyPresentations onMyPresentationsHandler={newScreenHandler}/>;\n//    else if (currentScreen === 3)\n//      return <PresentationDetails onPresentationDetails={newScreenHandler}/>;\n//    else if (currentScreen === 4)\n//      return <TranscriptDetails onTranscriptDetails={newScreenHandler}/>\n//  }\n\n   return(\n      <div className=\"App\" style={{backgroundColor:\"lightblue\", minHeight: \"102vh\" }}>\n         {UIViewController()}\n      </div>\n   );\n\n   /*return (\n      <div>\n         <Router>\n            <div>\n               <p>\n                  app.js file\n               </p>\n               <Link to=\"/login\">\n                  <button variant=\"outlined\">\n                     Sign up\n                  </button>\n               </Link>\n            </div>\n            <Routes>\n               <Route path=\"/pages/Login\" component={<Login />} />\n               <Route path=\"/pages/MainMenu\" component={<MainMenu />} />\n            </Routes>\n         </Router>\n      </div>\n   );*/\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Login from './pages/Login'\nimport reportWebVitals from './reportWebVitals';\n\nimport {\n    HashRouter as Router,\n    Route,\n    Switch,\n    Link,\n    Redirect,\n    withRouter\n} from \"react-router-dom\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n        <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}